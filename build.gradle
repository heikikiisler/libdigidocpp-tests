apply plugin: 'java'

repositories {
    jcenter()
}

sourceCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    compile group: 'org.testng', name: 'testng', version: '6.11'
    compile group: 'com.typesafe', name: 'config', version: '1.3.1'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
	compile group: 'io.appium', name: 'java-client', version: '5.0.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

}

def buildProperties = new Properties()
file("properties.conf").withInputStream {
    stream -> buildProperties.load(stream)
}

task prepareValidationZipFile(type: Zip) {
    from 'dataFiles'
    include '*'
    exclude '*.txt'
    exclude '*.zip'
    exclude '*.log'
    exclude '*.json'
    archiveName 'validationFiles.zip'
    destinationDir(file('download'))
    outputs.upToDateWhen {false}
}

task generateSuite(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "ee.testijad.mobilecpp.tests.GenerateSuite"
    outputs.upToDateWhen {false}
}

task validateWithAndroid(type: JavaExec) {
    doFirst {
        systemProperty 'mobilecpp.os', 'android'
    }
    classpath = sourceSets.main.runtimeClasspath
    main = "ee.testijad.mobilecpp.app.RunApps"
    outputs.upToDateWhen {false}
}

task validateWithIos(type: JavaExec) {
    doFirst {
        systemProperty 'mobilecpp.os', 'ios'
    }
    classpath = sourceSets.main.runtimeClasspath
    main = "ee.testijad.mobilecpp.app.RunApps"
    outputs.upToDateWhen {false}
}

if (project.hasProperty('customResultsDir')) {
    long epoch = new Date().getTime()/1000
    testReportDirName = "${buildDir}/" + epoch
}

task validationTest(type: Test) {
    doFirst {
        if (project.hasProperty('resultsFile')) {
            systemProperty 'mobilecpp.results-file', project.property('resultsFile')
        }
    }
    useTestNG() {
        suites buildProperties.getProperty("testSuiteFileDirectory").replaceAll("\"", "")
        useDefaultListeners = true
   //     testLogging.showStandardStreams = true
    }
    outputs.upToDateWhen {false}
}

task androidTest(type: GradleBuild) {
  //  tasks = ['prepareValidationZipFile', 'validateWithAndroid', 'generateSuite', 'validationTest']
    dependsOn = ['prepareValidationZipFile', 'generateSuite']
    doFirst {
        validateWithAndroid.execute()
    }
    doLast {
        validationTest.execute()
    }
}

task iosTest(type: GradleBuild) {
    tasks = ['prepareValidationZipFile', 'validateWithIos', 'generateSuite', 'validationTest']
}

task diagnosticHttpServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "ee.testijad.mobilecpp.server.HttpServerRunner"
    outputs.upToDateWhen {false}
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}
